"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[130],{732:e=>{e.exports=JSON.parse('{"functions":[{"name":"EditDefaultSandbox","desc":"Edits the default sandbox configuration. This is used to add or remove certain\\nglobals in the sandbox environment.\\n\\nThe config is saved and will be used for all future sandboxes **made AFTER this\\nfunction is called**. Calls to this will overwrite previous values, if any.\\n\\nDue to dictionary limitations, values cannot be set to `nil`. To remove a global,\\nset the value to `false`.\\n\\nThe following globals are **always** removed from the sandbox:\\n- `getfenv`\\n- `setfenv`\\n- `loadstring`\\n- `newproxy`\\n- `debug` (library), `debug.info`, & `debug.traceback`\\n\\nAttempting to add these functions/libraries will result in them being ignored.\\nHowever, you can set them to other values, such as a custom function.\\nThis will also allow you to overwrite already sandboxed globals, such as `game`.\\n\\nThe sandboxer will make **no attempt** to secure custom functions, so use them\\nat your own risk. The only change that will occur is that if the function returns\\n`Instance`s, they will be wrapped, and if wrapped `Instance`s are passed to the\\nfunction, they will be unwrapped.\\n\\nDo note that the environment table passed to `setfenv` does NOT have a metatable,\\nunlike Roblox\'s default environment. \\n\\nThe function will return `true` if the operation was completely successful\\n(i.e., all values were set on the configuration table) and `false` if any \\nof the keys or values were forbidden globals.\\n\\n**The table is NOT recursively checked for forbidden globals. If you manage\\nto bypass the checks, you are responsible for any consequences.**","params":[{"name":"config","desc":"A table containing the configuration for the sandbox.","lua_type":"{ [string]: any }"}],"returns":[{"desc":"Whether the operation was *completely* successful.","lua_type":"boolean"}],"function_type":"static","source":{"line":232,"path":"src/Sandboxer.luau"}},{"name":"Init","desc":"Initailizes the sandbox environment for the calling script.\\n\\nThe following globals are **removed**:\\n- `_G` / `shared`\\n- `SharedTable`\\n- `debug` library\\n- `getfenv`\\n- `setfenv`\\n- `loadstring`\\n- `newproxy`\\n- `xpcall` (*note: use `pcall` instead*)\\n\\nAll other globals are set to sandboxed versions of the originals.","params":[],"returns":[],"function_type":"method","source":{"line":261,"path":"src/Sandboxer.luau"}},{"name":"Sandbox","desc":"Sandboxes the given function or the calling script at the specified level.\\n\\n| Level | Definition |\\n|-------|------------|\\n| 1     | function calling `Sandboxer:Sandbox` |\\n| 2     | caller of the above function |\\n| 3...  | etc. |","params":[{"name":"fnOrLevel","desc":"The function to sandbox or the level to sandbox at.","lua_type":"InstanceSandboxer.AnyFn | number"}],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"level must be at least 1\\"","desc":"If fnOrLevel is a number, it must be at least 1."}],"source":{"line":288,"path":"src/Sandboxer.luau"}},{"name":"SandboxString","desc":"Loads the Luau chunk `src` as a function using `loadstring` and \\nsandboxes it. **`ServerScriptService.LoadStringEnabled` must be `true`\\nfor this to work as per the `loadstring` rules.**","params":[{"name":"src","desc":"The specified string to be loaded as Luau code.","lua_type":"string"},{"name":"chunkname","desc":"An optional chunk name for error messages and debug information.","lua_type":"string"}],"returns":[{"desc":"","lua_type":"InstanceSandboxer.AnyFn\\n"}],"function_type":"method","errors":[{"lua_type":"\\"loadstring() is not available\\"","desc":"ServerScriptService.LoadStringEnabled was false."}],"source":{"line":453,"path":"src/Sandboxer.luau"}}],"properties":[],"types":[],"name":"Sandboxer","desc":"The main Sandboxer class. This class is intended to be used as follows,\\nwhere the module is placed in ServerScriptService named `Init`:\\n```lua\\nrequire(game:GetService(\\"ServerScriptService\\").Init):Init()\\n```\\nThis would be expected to be the first line of all scripts that are to be sandboxed\\n(not including `--!strict`, `--!optimize`, and other directives).\\n\\nHaving this be the first line guarantees that the script is sandboxed before any other code runs.\\nYou would have to check if it is the first line of code yourself, using external sources with\\nmodules such as [rbx-reader](https://npmjs.org/package/rbx-reader).\\n\\nMore customizability is planned for the future, such as:\\n- Customizing the environment\\n- Customizing allowed Instances\\n- Customizing allowed RBXScriptSignals\\n- Customizing allowed methods","source":{"line":42,"path":"src/Sandboxer.luau"}}')}}]);