"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[982],{9419:e=>{e.exports=JSON.parse('{"functions":[{"name":"instanceAllowed","desc":"Checks if an `Instance` is allowed in the sandbox based on\\n`Allow`, `ExplicitDisallow`, and `ForbiddenClasses`.","params":[{"name":"inst","desc":"The `Instance` to check.","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":136,"path":"src/InstanceList.luau"}}],"properties":[{"name":"DisallowedClasses","desc":"A list of classes that are not allowed to be created by\\n`Instance.new` nor `Instance.fromExisting`.\\n\\nItems can be added to the list, but it cannot be overwritten.\\n\\nChanges to this list will be reflected in the sandbox, even if\\nthey are made after the sandbox has been initialized. However,\\nif an `Instance` of a disallowed class is already created,\\nit will continue to function as normal.","lua_type":"{string}","readonly":true,"source":{"line":49,"path":"src/InstanceList.luau"}},{"name":"ForbiddenClasses","desc":"A list of classes that are not allowed to be accessed\\nvia the sandbox, period. Every time an `Instance` reference\\nis accessed, its class will be checked against this list using\\n`IsA`. If it matches any of the classes in this list, `nil` will\\nbe returned instead.\\n\\nItems can be added to the list, but it cannot be overwritten.\\n\\nChanges to this list will be reflected in the sandbox, even if\\nthey are made after the sandbox has been initialized. However,\\nif an `Instance` of a forbidden class is already referenced in\\na variable it will continue to function as normal.","lua_type":"{string}","readonly":true,"source":{"line":70,"path":"src/InstanceList.luau"}},{"name":"ExplicitDisallow","desc":"A list of `Instance`s that are explicitly disallowed in the sandbox.\\nThis is a mapping of `Instance`s to boolean values, which indicate whether\\nthe `Instance`\'s descendants are allowed or not.\\n\\nItems can be added to the list, but it cannot be overwritten.\\n\\nChanges to this list will be reflected in the sandbox, even if\\nthey are made after the sandbox has been initialized. However,\\nif a blocked `Instance` is already wrapped, it will continue to\\nfunction as normal.","lua_type":"{ [Instance]: boolean }","readonly":true,"source":{"line":92,"path":"src/InstanceList.luau"}},{"name":"Allow","desc":"A list of `Instance`s that are allowed in the sandbox.\\nThis is a mapping of `Instance`s to boolean values, which indicate whether\\nthe `Instance`\'s descendants are allowed or not.\\n\\nIf any `Instance` is present in this list, but it is disallowed in `ExplicitDisallow`,\\nit will be disallowed in the sandbox.\\n\\nItems can be added to the list, but it cannot be overwritten.\\n\\nChanges to this list will be reflected in the sandbox, even if\\nthey are made after the sandbox has been initialized. However,\\nif a blocked `Instance` is already wrapped, it will continue to\\nfunction as normal.","lua_type":"{ [Instance]: boolean }","readonly":true,"source":{"line":126,"path":"src/InstanceList.luau"}}],"types":[],"name":"InstanceList","desc":"A list of `Instance`s that are allowed or disallowed in the sandbox.\\n\\nYou can use this to check if an `Instance` is allowed or disallowed in the sandbox,\\nor if an `Instance` or `RBXScriptSignal` is wrapped or not.","source":{"line":31,"path":"src/InstanceList.luau"}}')}}]);