"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[162],{93:e=>{e.exports=JSON.parse('{"functions":[{"name":"deepWrap","desc":"Deeply wraps `v` if it is a table, wrapping `Instance`s and `RBXScriptSignal`s as needed.\\nIf `v` is an `Instance` or `RBXScriptSignal`, it will be wrapped and returned.","params":[{"name":"v","desc":"The value to deeply wrap.","lua_type":"any"},{"name":"instance","desc":"The `Instance` if wrapping one of its properties, methods, or events.","lua_type":"Instance?"},{"name":"key","desc":"The key of the property, method, or event being wrapped, if applicable.","lua_type":"string?"},{"name":"pvisited","desc":"","lua_type":"{ [any]: any }?"}],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"static","source":{"line":77,"path":"src/InstanceSandboxer.luau"}},{"name":"deepUnwrap","desc":"Deeply unwraps `v` if it is a table, unwrapping `Instance`s and `RBXScriptSignal`s as needed.\\nIf `v` is a wrapped `Instance` or `RBXScriptSignal`, it will be unwrapped and returned.","params":[{"name":"v","desc":"The value to deeply unwrap.","lua_type":"any"},{"name":"pvisited","desc":"","lua_type":"{ [any]: any }?"}],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"static","source":{"line":118,"path":"src/InstanceSandboxer.luau"}},{"name":"unwrapArgs","desc":"Deeply unwraps all arguments passed to the function (usually\\nfrom inside the sandbox), making them ready to be used in a\\nmethod call on an `Instance`.","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"...any\\n"}],"function_type":"static","source":{"line":158,"path":"src/InstanceSandboxer.luau"}},{"name":"wrapArgs","desc":"Deeply wraps all arguments passed to the function, making\\nthem ready to be returned to the sandboxed environment.","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"...any\\n"}],"function_type":"static","source":{"line":176,"path":"src/InstanceSandboxer.luau"}},{"name":"wrapFn","desc":"Wraps a function in a proxy that allows it to be safely used in the sandbox.\\nThe wrapped function will return wrapped arguments when called.","params":[{"name":"fn","desc":"The function to wrap.","lua_type":"AnyFn"}],"returns":[{"desc":"The wrapped function.","lua_type":"AnyFn"}],"function_type":"static","source":{"line":194,"path":"src/InstanceSandboxer.luau"}},{"name":"reverseWrapFn","desc":"Wraps a function in a proxy that allows it to be safely used outside the sandbox.\\nThis is mainly used for callbacks being added to stuff like BindableFunctions.","params":[{"name":"fn","desc":"The function to wrap.","lua_type":"AnyFn"}],"returns":[{"desc":"The wrapped function.","lua_type":"AnyFn"}],"function_type":"static","source":{"line":225,"path":"src/InstanceSandboxer.luau"}},{"name":"wrapEvent","desc":"Wraps an `RBXScriptSignal` in a proxy that allows it to be safely used in \\nthe sandbox. The proxy will have the same methods as an `RBXScriptSignal`, \\nbut will return wrapped arguments when the signal is fired.","params":[{"name":"signal","desc":"The `RBXScriptSignal` to wrap.","lua_type":"RBXScriptSignal"},{"name":"name","desc":"The name of the signal, used for debugging purposes and printing out to console.","lua_type":"string"}],"returns":[{"desc":"The wrapped `RBXScriptSignal`.","lua_type":"any"}],"function_type":"static","source":{"line":361,"path":"src/InstanceSandboxer.luau"}},{"name":"wrapInstance","desc":"Wraps an `Instance` in a proxy that allows it to be safely used in the sandbox.\\nThe proxy will have the same properties, methods, and events as the `Instance`, \\nbut will return wrapped arguments when accessed.","params":[{"name":"instance","desc":"The `Instance` to wrap.","lua_type":"Instance"}],"returns":[{"desc":"The wrapped `Instance`.","lua_type":"any"}],"function_type":"static","source":{"line":398,"path":"src/InstanceSandboxer.luau"}},{"name":"unwrap","desc":"Unwraps a wrapped `Instance` or `RBXScriptSignal`.\\nIf the `Instance` or `RBXScriptSignal` is not wrapped, it will return `nil`.","params":[{"name":"a","desc":"The wrapped `Instance` or `RBXScriptSignal` to unwrap.","lua_type":"any"}],"returns":[{"desc":"","lua_type":"(Instance | RBXScriptSignal)?\\n"}],"function_type":"static","source":{"line":149,"path":"src/InstanceList.luau"}},{"name":"isWrapped","desc":"Checks if `a` is a wrapped `Instance`.","params":[{"name":"a","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":159,"path":"src/InstanceList.luau"}},{"name":"isWrappedSignal","desc":"Checks if `a` is a wrapped `RBXScriptSignal`.","params":[{"name":"a","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":170,"path":"src/InstanceList.luau"}}],"properties":[],"types":[{"name":"AnyFn","desc":"Function type that all functions can be reduced to.","lua_type":"(...any) -> ...any","source":{"line":64,"path":"src/InstanceSandboxer.luau"}}],"name":"InstanceSandboxer","desc":"A class for wrapping and unwrapping `Instance`s and `RBXScriptSignal`s.","source":{"line":32,"path":"src/InstanceSandboxer.luau"}}')}}]);